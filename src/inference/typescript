Script started on 2020-03-26 19:53:55+0400
l]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inferencejetson@jetson:~/vanilla.robotix.MikeCore/src/inference$ l[Kcd script/
]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inference/scriptjetson@jetson:~/vanilla.robotix.MikeCore/src/inference/script$ ls
[0m[01;34mconfig[0m  [01;32mmain.py[0m  [01;34mpredict[0m  [01;34mpreprocess[0m  [01;34mres[0m
]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inference/scriptjetson@jetson:~/vanilla.robotix.MikeCore/src/inference/script$ ls
[0m[01;34mconfig[0m  [01;32mmain.py[0m  [01;34mpredict[0m  [01;34mpreprocess[0m  [01;34mres[0m
]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inference/scriptjetson@jetson:~/vanilla.robotix.MikeCore/src/inference/script$ ls
[0m[01;34mconfig[0m  [01;32mmain.py[0m  [01;34mpredict[0m  [01;34mpreprocess[0m  [01;34mres[0m
]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inference/scriptjetson@jetson:~/vanilla.robotix.MikeCore/src/inference/script$ ls
[0m[01;34mconfig[0m  [01;32mmain.py[0m  [01;34mpredict[0m  [01;34mpreprocess[0m  [01;34mres[0m
]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inference/scriptjetson@jetson:~/vanilla.robotix.MikeCore/src/inference/script$ > pretrained.py
]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inference/scriptjetson@jetson:~/vanilla.robotix.MikeCore/src/inference/script$ nano main.py
[?1049h[22;0;0t[1;24r(B[m[4l[?7h[39;49m[?1h=[?1h=[?1h=[?25l[39;49m(B[m[H[2J[22;33H(B[0;7m[ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ ](B[m[22;32H(B[0;7m[ Read 41 lines ](B[m[H(B[0;7m  GNU nano 2.9.3                        main.py                                 [1;79H(B[m[23d(B[0;7m^G(B[m –ü–æ–º–æ—â—å    (B[0;7m^O(B[m –ó–∞–ø–∏—Å–∞—Ç—å  (B[0;7m^W(B[m –ü–æ–∏—Å–∫     (B[0;7m^K(B[m –í—ã—Ä–µ–∑–∞—Ç—å  (B[0;7m^J(B[m –í—ã—Ä–æ–≤–Ω—è—Ç—å (B[0;7m^C(B[m –¢–µ–∫–ü–æ–∑–∏—Ü[24d(B[0;7m^X(B[m –í—ã—Ö–æ–¥     (B[0;7m^R(B[m –ß–∏—Ç–§–∞–π–ª   (B[0;7m^\(B[m –ó–∞–º–µ–Ω–∞    (B[0;7m^U(B[m –û—Ç–º–µ–Ω. –≤—ã—Ä(B[0;7m^T(B[m –ü—Ä–æ–≤. —Å–∏–Ω—Ç(B[0;7m^_(B[m –ö —Å—Ç—Ä–æ–∫–µ[22d[3d(B[0;1m[31m#!/usr/bin/env python3[5d[36mimport[39m(B[m rospy[6d(B[0;1m[31m# cv send image shit[7d[36mfrom[39m(B[m sensor_msgs.msg (B[0;1m[36mimport[39m(B[m Image[8d(B[0;1m[36mfrom[39m(B[m cv_bridge (B[0;1m[36mimport[39m(B[m CvBridge[9d(B[0;1m[31m# inference[10d[36mfrom[39m(B[m config (B[0;1m[36mimport[39m(B[m config[11d(B[0;1m[36mfrom[39m(B[m preprocess.maxsizeproc (B[0;1m[36mimport[39m(B[m MaxSizePreprocessor[12d(B[0;1m[36mfrom[39m(B[m predict.classes (B[0;1m[36mimport[39m(B[m get_class_name[13d(B[0;1m[36mfrom[39m(B[m predict.tf_model (B[0;1m[36mimport[39m(B[m TFModel[14d(B[0;1m[36mfrom[39m(B[m predict.ui (B[0;1m[36mimport[39m(B[m draw_bbox[15d(B[0;1m[31m# std lib[16d[36mimport[39m(B[m cv2[18dmodel = TFModel(config.FROZEN_GRAPH_PATH)[19dproc = MaxSizePreprocessor(1000)[3d[?12l[?25h[?25l[22d[J[24;80H[?12l[?25h[24;1H[?1049l[23;0;0t[?1l>]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inference/scriptjetson@jetson:~/vanilla.robotix.MikeCore/src/inference/script$ nano main.py> pretrained.pyls[K> pretrained.py[C[1P pretrained.pyna pretrained.pyn pretrained.py [A]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inference/scriptjetson@jetson:~/vanilla.robotix.MikeCore/src/inference/script$ [C[C[Co pretrained.pyy[A]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inference/scriptjetson@jetson:~/vanilla.robotix.MikeCore/src/inference/script$ [C[C[C[C

[?1049h[22;0;0t[1;24r(B[m[4l[?7h[39;49m[?1h=[?1h=[?1h=[?25l[39;49m(B[m[H[2J[22;33H(B[0;7m[ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ ](B[m[22;35H(B[0;7mRead 0 lines ](B[m[H(B[0;7m  GNU nano 2.9.3                     pretrained.py                              [1;79H(B[m[23d(B[0;7m^G(B[m –ü–æ–º–æ—â—å    (B[0;7m^O(B[m –ó–∞–ø–∏—Å–∞—Ç—å  (B[0;7m^W(B[m –ü–æ–∏—Å–∫     (B[0;7m^K(B[m –í—ã—Ä–µ–∑–∞—Ç—å  (B[0;7m^J(B[m –í—ã—Ä–æ–≤–Ω—è—Ç—å (B[0;7m^C(B[m –¢–µ–∫–ü–æ–∑–∏—Ü[24d(B[0;7m^X(B[m –í—ã—Ö–æ–¥     (B[0;7m^R(B[m –ß–∏—Ç–§–∞–π–ª   (B[0;7m^\(B[m –ó–∞–º–µ–Ω–∞    (B[0;7m^U(B[m –û—Ç–º–µ–Ω. –≤—ã—Ä(B[0;7m^T(B[m –ü—Ä–æ–≤. —Å–∏–Ω—Ç(B[0;7m^_(B[m –ö —Å—Ç—Ä–æ–∫–µ[22d[3d[39;49m(B[m[?12l[?25h[?25l[1;72H(B[0;7m–ò–∑–º–µ–Ω—ë–Ω(B[m[3d(B[0;1m[31m#!/usr/bin/env python3[5d[36mimport[39m(B[m rospy[6d(B[0;1m[31m# cv send image shit[7d[36mfrom[39m(B[m sensor_msgs.msg (B[0;1m[36mimport[39m(B[m Image[8d(B[0;1m[36mfrom[39m(B[m cv_bridge (B[0;1m[36mimport[39m(B[m CvBridge[9d(B[0;1m[31m# inference[10d[36mfrom[39m(B[m config (B[0;1m[36mimport[39m(B[m config[11d(B[0;1m[36mfrom[39m(B[m preprocess.maxsizeproc (B[0;1m[36mimport[39m(B[m MaxSizePreprocessor[12d(B[0;1m[36mfrom[39m(B[m predict.classes (B[0;1m[36mimport[39m(B[m get_class_name[13d(B[0;1m[36mfrom[39m(B[m predict.tf_model (B[0;1m[36mimport[39m(B[m TFModel[14d(B[0;1m[36mfrom[39m(B[m predict.ui (B[0;1m[36mimport[39m(B[m draw_bbox[15d(B[0;1m[31m# std lib[16d[36mimport[39m(B[m cv2[18dmodel = TFModel(config.FROZEN_GRAPH_PATH)[19dproc = MaxSizePreprocessor(1000)[22d[K[20d[?12l[?25h[?25l[A[?12l[?25h[?25l[15d[?12l[?25h[?25l[A[?12l[?25h[?25l[15d[?12l[?25h[?25l[17d[?12l[?25h[?25l[18d[?12l[?25h[?25l[19d[?12l[?25h[?25l[20d[?12l[?25h[?25l[21d[?12l[?25h[?25l[?12l[?25h[?25l7[3;22r8[22d[10S[1;24r[12;1Hmodel = VGG16(weights=(B[0;1m[32m'imagenet'[39m(B[m, include_top=(B[0;1m[35mFalse[39m(B[m)[14dimg_path = (B[0;1m[32m'elephant.jpg'[15d[39m(B[mimg = image.load_img(img_path, target_size=(224, 224))[16dx = image.img_to_array(img)[17dx = np.expand_dims(x, axis=0)[18dx = preprocess_input(x)[20dfeatures = model.predict(x)[21d[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[6d[?12l[?25h[?25l[7d[?12l[?25h[?25l[8d[?12l[?25h[?25l[1P[?12l[?25h[?25l(B[0;1m[36mdel[39m(B[m[1P[?12l[?25h[?25lel[1P[?12l[?25h[?25l[1P[?12l[?25h[?25l[1P[?12l[?25h[?25l[1P[?12l[?25h[?25l[1P[?12l[?25h[?25l[1P[?12l[?25h[?25l[1P[?12l[?25h[?25l[1P[?12l[?25h[?25l[1P[?12l[?25h[?25l(B[0;1m[36mdel[39m(B[m[1P[?12l[?25h[?25lel[1P[?12l[?25h[?25l[3P[?12l[?25h[?25l[1P[?12l[?25h[?25l[1P[?12l[?25h[?25l[1P[?12l[?25h[?25l[1P[?12l[?25h[?25l[1P[?12l[?25h[?25l[1P[?12l[?25h[?25l[1P[?12l[?25h[?25l[1P[?12l[?25h[?25l[1P[?12l[?25h[?25l[1P[?12l[?25h[?25l[1P[?12l[?25h[?25l[1P[?12l[?25h[?25l[1P[?12l[?25h[?25l[1P[?12l[?25h[?25l[1P[?12l[?25h[?25l[1P[?12l[?25h[?25l[1P[?12l[?25h[?25l[1P[?12l[?25h[?25l[1P[?12l[?25h[?25lPATH)[K[?12l[?25h[?25lATH)[K[?12l[?25h[?25lTH)[K[?12l[?25h[?25lH)[K[?12l[?25h[?25l)[K[?12l[?25h[?25l[K[?12l[?25h[?25l[9d[?12l[?25h[?25l[10d[?12l[?25h[?25l[11d[?12l[?25h[?25l[10;22r[22;1H
[1;24r[10;1H[?12l[?25h[?25l[10;22r[22;1H
[1;24r[9;33H[?12l[?25h[?25l [?12l[?25h[?25l[26G[K[?12l[?25h[?25l[K[?12l[?25h[?25l[K[?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25lpr[K[?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[7;22r[22;1H
[1;24r[8;1H[?12l[?25h[?25l[7;22r[22;1H
[1;24r[7;1H[?12l[?25h[?25l[22d(B[0;7m–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π –±—É—Ñ–µ—Ä?  (–ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ "–ù–µ—Ç" –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ü–û–¢–ï–†–Ø–ù–´.)   [23;1H Y(B[m –î–∞[K[24d(B[0;7m N(B[m –ù–µ—Ç          (B[0;7m^C(B[m –û—Ç–º–µ–Ω–∞[K[22;79H[?12l[?25h[?25l[J[24;80H[?12l[?25h[24;1H[?1049l[23;0;0t[?1l>]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inference/scriptjetson@jetson:~/vanilla.robotix.MikeCore/src/inference/script$ 
]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inference/scriptjetson@jetson:~/vanilla.robotix.MikeCore/src/inference/script$ nano pretrained.pyy[A]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inference/scriptjetson@jetson:~/vanilla.robotix.MikeCore/src/inference/script$ [C[C[C[C[C[5Pmain.py
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cpretrained.pyy
[?1049h[22;0;0t[1;24r(B[m[4l[?7h[39;49m[?1h=[?1h=[?1h=[?25l[39;49m(B[m[H[2J[22;33H(B[0;7m[ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ ](B[m[22;35H(B[0;7mRead 0 lines ](B[m[H(B[0;7m  GNU nano 2.9.3                     pretrained.py                              [1;79H(B[m[23d(B[0;7m^G(B[m –ü–æ–º–æ—â—å    (B[0;7m^O(B[m –ó–∞–ø–∏—Å–∞—Ç—å  (B[0;7m^W(B[m –ü–æ–∏—Å–∫     (B[0;7m^K(B[m –í—ã—Ä–µ–∑–∞—Ç—å  (B[0;7m^J(B[m –í—ã—Ä–æ–≤–Ω—è—Ç—å (B[0;7m^C(B[m –¢–µ–∫–ü–æ–∑–∏—Ü[24d(B[0;7m^X(B[m –í—ã—Ö–æ–¥     (B[0;7m^R(B[m –ß–∏—Ç–§–∞–π–ª   (B[0;7m^\(B[m –ó–∞–º–µ–Ω–∞    (B[0;7m^U(B[m –û—Ç–º–µ–Ω. –≤—ã—Ä(B[0;7m^T(B[m –ü—Ä–æ–≤. —Å–∏–Ω—Ç(B[0;7m^_(B[m –ö —Å—Ç—Ä–æ–∫–µ[22d[3d[39;49m(B[m[?12l[?25h[?25l[22;16H(B[0;7m[ line 1/1 (100%), col 1/1 (100%), char 0/0 (0%) ](B[m[3d[?12l[?25h[?25l[24;1H[?12l[?25h[?1049l[23;0;0t[?1l>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´fg¬ª –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ nano

[1]+  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω    nano pretrained.py
]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inference/scriptjetson@jetson:~/vanilla.robotix.MikeCore/src/inference/script$ nano pretrained.pyy[A]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inference/scriptjetson@jetson:~/vanilla.robotix.MikeCore/src/inference/script$ [C[C[C[C[C[5Pmain.py
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
[?1049h[22;0;0t[1;24r(B[m[4l[?7h[39;49m[?1h=[?1h=[?1h=[?25l[39;49m(B[m[H[2J[22;33H(B[0;7m[ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ ](B[m[22;32H(B[0;7m[ Read 41 lines ](B[m[H(B[0;7m  GNU nano 2.9.3                        main.py                                 [1;79H(B[m[23d(B[0;7m^G(B[m –ü–æ–º–æ—â—å    (B[0;7m^O(B[m –ó–∞–ø–∏—Å–∞—Ç—å  (B[0;7m^W(B[m –ü–æ–∏—Å–∫     (B[0;7m^K(B[m –í—ã—Ä–µ–∑–∞—Ç—å  (B[0;7m^J(B[m –í—ã—Ä–æ–≤–Ω—è—Ç—å (B[0;7m^C(B[m –¢–µ–∫–ü–æ–∑–∏—Ü[24d(B[0;7m^X(B[m –í—ã—Ö–æ–¥     (B[0;7m^R(B[m –ß–∏—Ç–§–∞–π–ª   (B[0;7m^\(B[m –ó–∞–º–µ–Ω–∞    (B[0;7m^U(B[m –û—Ç–º–µ–Ω. –≤—ã—Ä(B[0;7m^T(B[m –ü—Ä–æ–≤. —Å–∏–Ω—Ç(B[0;7m^_(B[m –ö —Å—Ç—Ä–æ–∫–µ[22d[3d(B[0;1m[31m#!/usr/bin/env python3[5d[36mimport[39m(B[m rospy[6d(B[0;1m[31m# cv send image shit[7d[36mfrom[39m(B[m sensor_msgs.msg (B[0;1m[36mimport[39m(B[m Image[8d(B[0;1m[36mfrom[39m(B[m cv_bridge (B[0;1m[36mimport[39m(B[m CvBridge[9d(B[0;1m[31m# inference[10d[36mfrom[39m(B[m config (B[0;1m[36mimport[39m(B[m config[11d(B[0;1m[36mfrom[39m(B[m preprocess.maxsizeproc (B[0;1m[36mimport[39m(B[m MaxSizePreprocessor[12d(B[0;1m[36mfrom[39m(B[m predict.classes (B[0;1m[36mimport[39m(B[m get_class_name[13d(B[0;1m[36mfrom[39m(B[m predict.tf_model (B[0;1m[36mimport[39m(B[m TFModel[14d(B[0;1m[36mfrom[39m(B[m predict.ui (B[0;1m[36mimport[39m(B[m draw_bbox[15d(B[0;1m[31m# std lib[16d[36mimport[39m(B[m cv2[18dmodel = TFModel(config.FROZEN_GRAPH_PATH)[19dproc = MaxSizePreprocessor(1000)[3d[?12l[?25h[?25l[22;15H(B[0;7m[ line 1/42 (2%), col 1/23 (4%), char 0/1134 (0%) ](B[m[3d[?12l[?25h[?25l[22d[J[24;80H[?12l[?25h[24;1H[?1049l[23;0;0t[?1l>]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inference/scriptjetson@jetson:~/vanilla.robotix.MikeCore/src/inference/script$ nano main.pypretrained.pyy[A]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inference/scriptjetson@jetson:~/vanilla.robotix.MikeCore/src/inference/script$ [C[C[C[C[C[5Pmain.py
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cpretrained.pyy
[?1049h[22;0;0t[1;24r(B[m[4l[?7h[39;49m[?1h=[?1h=[?1h=[?25l[39;49m(B[m[H[2J[22d(B[0;7m–§–∞–π–ª _ —É–∂–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º jetson –≤ nano 2.9.3, PID 8609). –ü—Ä–æ–¥–æ–ª–∂ [23;1H Y(B[m –î–∞[24d(B[0;7m N(B[m –ù–µ—Ç[24;17H(B[0;7m^C(B[m –û—Ç–º–µ–Ω–∞[22;80H[?12l[?25h[?25l[H(B[0;7m  GNU nano 2.9.3                      –ù–æ–≤—ã–π –±—É—Ñ–µ—Ä                               [22;1H(B[m[K[1;79H[23d(B[0;7m^G(B[m –ü–æ–º–æ—â—å    (B[0;7m^O(B[m –ó–∞–ø–∏—Å–∞—Ç—å  (B[0;7m^W(B[m –ü–æ–∏—Å–∫     (B[0;7m^K(B[m –í—ã—Ä–µ–∑–∞—Ç—å  (B[0;7m^J(B[m –í—ã—Ä–æ–≤–Ω—è—Ç—å (B[0;7m^C(B[m –¢–µ–∫–ü–æ–∑–∏—Ü[24d(B[0;7m^X(B[m –í—ã—Ö–æ–¥     (B[0;7m^R(B[m –ß–∏—Ç–§–∞–π–ª   (B[0;7m^\(B[m –ó–∞–º–µ–Ω–∞    (B[0;7m^U(B[m –û—Ç–º–µ–Ω. –≤—ã—Ä(B[0;7m^T(B[m –°–ª–æ–≤–∞—Ä—å   (B[0;7m^_(B[m –ö —Å—Ç—Ä–æ–∫–µ[22d[3d[39;49m(B[m[?12l[?25h[?25l[1;72H(B[0;7m–ò–∑–º–µ–Ω—ë–Ω(B[m[3d!/usr/bin/env python3[5dimport rospy[6d# cv send image shit[7dfrom sensor_msgs.msg import Image[8dfrom cv_bridge import CvBridge[9d# inference[10dfrom config import config[11dfrom preprocess.maxsizeproc import MaxSizePreprocessor[12dfrom predict.classes import get_class_name[13dfrom predict.tf_model import TFModel[14dfrom predict.ui import draw_bbox[15d# std lib[16dimport cv2[18dmodel = TFModel(config.FROZEN_GRAPH_PATH)[19dproc = MaxSizePreprocessor(1000)[20d[?12l[?25h[?25l[A[?12l[?25h[?25l[22d(B[0;7m–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π –±—É—Ñ–µ—Ä?  (–ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ "–ù–µ—Ç" –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ü–û–¢–ï–†–Ø–ù–´.)   [23;1H Y(B[m –î–∞[K[24d(B[0;7m N(B[m –ù–µ—Ç          (B[0;7m^C(B[m –û—Ç–º–µ–Ω–∞[K[22;79H[?12l[?25h[?25l[23d(B[0;7m^G(B[m –ü–æ–º–æ—â—å[23;21H(B[0;7mM-D(B[m –§–æ—Ä–º–∞—Ç DOS[41G(B[0;7mM-A(B[m –î–æ–ø. –≤ –Ω–∞—á–∞–ª–æ   (B[0;7mM-B(B[m –†–µ–∑–µ—Ä–≤. –∫–æ–ø–∏—è[24d(B[0;7m^C(B[m –û—Ç–º–µ–Ω–∞[17G    (B[0;7mM-M(B[m –§–æ—Ä–º–∞—Ç Mac[41G(B[0;7mM-P(B[m –î–æ–ø. –≤ –∫–æ–Ω–µ—Ü    (B[0;7m^T(B[m –ö —Ñ–∞–π–ª–∞–º[22d(B[0;7m–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏:                                                        (B[m[22;23H[?12l[?25h[?25l[22;34H[1K (B[0;7m[ –û—Ç–º–µ–Ω–µ–Ω–æ ](B[m[K[23;14H(B[0;7m^O(B[m –ó–∞–ø–∏—Å–∞—Ç—å  (B[0;7m^W(B[m –ü–æ–∏—Å–∫     (B[0;7m^K(B[m –í—ã—Ä–µ–∑–∞—Ç—å  (B[0;7m^J(B[m –í—ã—Ä–æ–≤–Ω—è—Ç—å (B[0;7m^C(B[m –¢–µ–∫–ü–æ–∑–∏—Ü[K[24;2H(B[0;7mX(B[m –í—ã—Ö–æ–¥     (B[0;7m^R(B[m –ß–∏—Ç–§–∞–π–ª   (B[0;7m^\(B[m –ó–∞–º–µ–Ω–∞    (B[0;7m^U(B[m –û—Ç–º–µ–Ω. –≤—ã—Ä(B[0;7m^T(B[m –°–ª–æ–≤–∞—Ä—å   (B[0;7m^_(B[m –ö —Å—Ç—Ä–æ–∫–µ[22d[19d[?12l[?25h[?25l[22d(B[0;7m–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π –±—É—Ñ–µ—Ä?  (–ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ "–ù–µ—Ç" –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ü–û–¢–ï–†–Ø–ù–´.)   [23;1H Y(B[m –î–∞[K[24d(B[0;7m N(B[m –ù–µ—Ç          (B[0;7m^C(B[m –û—Ç–º–µ–Ω–∞[K[22;79H[?12l[?25h[?25l[J[24;80H[?12l[?25h[24;1H[?1049l[23;0;0t[?1l>]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inference/scriptjetson@jetson:~/vanilla.robotix.MikeCore/src/inference/script$ nano pretrained.pyy
[?1049h[22;0;0t[1;24r(B[m[4l[?7h[39;49m[?1h=[?1h=[?1h=[?25l[39;49m(B[m[H[2J[22d(B[0;7m–§–∞–π–ª _ —É–∂–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º jetson –≤ nano 2.9.3, PID 8609). –ü—Ä–æ–¥–æ–ª–∂ [23;1H Y(B[m –î–∞[24d(B[0;7m N(B[m –ù–µ—Ç[24;17H(B[0;7m^C(B[m –û—Ç–º–µ–Ω–∞[22;80H[?12l[?25h[?25l[22;32H[1K (B[0;7m[ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ ](B[m[K[22;35H(B[0;7mRead 0 lines ](B[m[H(B[0;7m  GNU nano 2.9.3                     pretrained.py                              [1;79H(B[m[23d(B[0;7m^G(B[m –ü–æ–º–æ—â—å    (B[0;7m^O(B[m –ó–∞–ø–∏—Å–∞—Ç—å  (B[0;7m^W(B[m –ü–æ–∏—Å–∫     (B[0;7m^K(B[m –í—ã—Ä–µ–∑–∞—Ç—å  (B[0;7m^J(B[m –í—ã—Ä–æ–≤–Ω—è—Ç—å (B[0;7m^C(B[m –¢–µ–∫–ü–æ–∑–∏—Ü[24d(B[0;7m^X(B[m –í—ã—Ö–æ–¥     (B[0;7m^R(B[m –ß–∏—Ç–§–∞–π–ª   (B[0;7m^\(B[m –ó–∞–º–µ–Ω–∞    (B[0;7m^U(B[m –û—Ç–º–µ–Ω. –≤—ã—Ä(B[0;7m^T(B[m –ü—Ä–æ–≤. —Å–∏–Ω—Ç(B[0;7m^_(B[m –ö —Å—Ç—Ä–æ–∫–µ[22d[3d[39;49m(B[m[?12l[?25h[?25l[1;72H(B[0;7m–ò–∑–º–µ–Ω—ë–Ω[22d(B[m[K[1;79H[3d(B[0;1m[36mfrom[39m(B[m keras.applications.vgg16 (B[0;1m[36mimport[39m(B[m VGG16[4d(B[0;1m[36mfrom[39m(B[m keras.preprocessing (B[0;1m[36mimport[39m(B[m image[5d(B[0;1m[36mfrom[39m(B[m keras.applications.vgg16 (B[0;1m[36mimport[39m(B[m preprocess_input[6d(B[0;1m[36mimport[39m(B[m numpy (B[0;1m[36mas[39m(B[m np[8dmodel = VGG16(weights=(B[0;1m[32m'imagenet'[39m(B[m, include_top=(B[0;1m[35mFalse[39m(B[m)[10dimg_path = (B[0;1m[32m'elephant.jpg'[11d[39m(B[mimg = image.load_img(img_path, target_size=(224, 224))[12dx = image.img_to_array(img)[13dx = np.expand_dims(x, axis=0)[14dx = preprocess_input(x)[16dfeatures = model.predict(x)[?12l[?25h[?25l[A[?12l[?25h[?25l[12;28H[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[8;28H[?12l[?25h[?25l[A[?12l[?25h[?25l[8;28H[?12l[?25h[?25l[10d[?12l[?25h[?25l[11dpa[?12l[?25h[?25l[A[?12l[?25h[?25l[22d(B[0;7m–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π –±—É—Ñ–µ—Ä?  (–ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ "–ù–µ—Ç" –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ü–û–¢–ï–†–Ø–ù–´.)   [23;1H Y(B[m –î–∞[K[24d(B[0;7m N(B[m –ù–µ—Ç          (B[0;7m^C(B[m –û—Ç–º–µ–Ω–∞[K[22;79H[?12l[?25h[?25l[23d(B[0;7m^G(B[m –ü–æ–º–æ—â—å[23;21H(B[0;7mM-D(B[m –§–æ—Ä–º–∞—Ç DOS[41G(B[0;7mM-A(B[m –î–æ–ø. –≤ –Ω–∞—á–∞–ª–æ   (B[0;7mM-B(B[m –†–µ–∑–µ—Ä–≤. –∫–æ–ø–∏—è[24d(B[0;7m^C(B[m –û—Ç–º–µ–Ω–∞[17G    (B[0;7mM-M(B[m –§–æ—Ä–º–∞—Ç Mac[41G(B[0;7mM-P(B[m –î–æ–ø. –≤ –∫–æ–Ω–µ—Ü    (B[0;7m^T(B[m –ö —Ñ–∞–π–ª–∞–º[22d(B[0;7m–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏: pretrained.py                                          (B[m[22;36H[?12l[?25h[?25l[K[1;79H[72G(B[0;7m       (B[m[22;32H(B[0;7m[ Wrote 14 lines ](B[m[J[24;80H[?12l[?25h[24;1H[?1049l[23;0;0t[?1l>]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inference/scriptjetson@jetson:~/vanilla.robotix.MikeCore/src/inference/script$ nano pretrained.pyy[A]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inference/scriptjetson@jetson:~/vanilla.robotix.MikeCore/src/inference/script$ [C[C[C[C[C[5Pmain.py
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K[K[K[K[K[K[K[K[K[K[K[Kls
[0m[01;34mconfig[0m  [01;32mmain.py[0m  [01;34mpredict[0m  [01;34mpreprocess[0m  pretrained.py  [01;34mres[0m
]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inference/scriptjetson@jetson:~/vanilla.robotix.MikeCore/src/inference/script$ cd[K[Kls predict/
[0m[01;32mclasses.py[0m  [01;34mdata_process[0m  [01;34m__pycache__[0m  [01;32mtf_model.py[0m  [01;32mui.py[0m
]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inference/scriptjetson@jetson:~/vanilla.robotix.MikeCore/src/inference/script$ ls pre
predict/       preprocess/    pretrained.py  
]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inference/scriptjetson@jetson:~/vanilla.robotix.MikeCore/src/inference/script$ ls preprocess/
__init__.py  [0m[01;32mmaxsizeproc.py[0m  [01;34m__pycache__[0m
]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inference/scriptjetson@jetson:~/vanilla.robotix.MikeCore/src/inference/script$ ls preprocess/[3Pdict/[Knano pretrained.pyy
[?1049h[22;0;0t[1;24r(B[m[4l[?7h[39;49m[?1h=[?1h=[?1h=[?25l[39;49m(B[m[H[2J[22;33H(B[0;7m[ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ ](B[m[22;32H(B[0;7m[ Read 14 lines ](B[m[H(B[0;7m  GNU nano 2.9.3                     pretrained.py                              [1;79H(B[m[23d(B[0;7m^G(B[m –ü–æ–º–æ—â—å    (B[0;7m^O(B[m –ó–∞–ø–∏—Å–∞—Ç—å  (B[0;7m^W(B[m –ü–æ–∏—Å–∫     (B[0;7m^K(B[m –í—ã—Ä–µ–∑–∞—Ç—å  (B[0;7m^J(B[m –í—ã—Ä–æ–≤–Ω—è—Ç—å (B[0;7m^C(B[m –¢–µ–∫–ü–æ–∑–∏—Ü[24d(B[0;7m^X(B[m –í—ã—Ö–æ–¥     (B[0;7m^R(B[m –ß–∏—Ç–§–∞–π–ª   (B[0;7m^\(B[m –ó–∞–º–µ–Ω–∞    (B[0;7m^U(B[m –û—Ç–º–µ–Ω. –≤—ã—Ä(B[0;7m^T(B[m –ü—Ä–æ–≤. —Å–∏–Ω—Ç(B[0;7m^_(B[m –ö —Å—Ç—Ä–æ–∫–µ[22d[3d(B[0;1m[36mfrom[39m(B[m keras.applications.vgg16 (B[0;1m[36mimport[39m(B[m VGG16[4d(B[0;1m[36mfrom[39m(B[m keras.preprocessing (B[0;1m[36mimport[39m(B[m image[5d(B[0;1m[36mfrom[39m(B[m keras.applications.vgg16 (B[0;1m[36mimport[39m(B[m preprocess_input[6d(B[0;1m[36mimport[39m(B[m numpy (B[0;1m[36mas[39m(B[m np[8dmodel = VGG16(weights=(B[0;1m[32m'imagenet'[39m(B[m, include_top=(B[0;1m[35mFalse[39m(B[m)[10dimg_path = (B[0;1m[32m'elephant.jpg'[11d[39m(B[mimg = image.load_img(img_path, target_size=(224, 224))[12dx = image.img_to_array(img)[13dx = np.expand_dims(x, axis=0)[14dx = preprocess_input(x)[16dfeatures = model.predict(x)[3d[?12l[?25h[?25l[4d[?12l[?25h[?25l[5d[?12l[?25h[?25l[6d[?12l[?25h[?25l[7d[?12l[?25h[?25l[8d[?12l[?25h[?25l[9d[?12l[?25h[?25l[10d[?12l[?25h[?25l[11d[?12l[?25h[?25l[12d[?12l[?25h[?25l[13d[?12l[?25h[?25l[14d[?12l[?25h[?25l[15d[?12l[?25h[?25l[16d[?12l[?25h[?25l[17d[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[16;28H[?12l[?25h[?25l[1;72H(B[0;7m–ò–∑–º–µ–Ω—ë–Ω(B[m[16;27H [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [22d[K[16;20H[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[A[?12l[?25h[?25l[14;24H[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[13;30H[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[12;28H[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[11;55H[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[10;26H[?12l[?25h[?25l[10;12H'elephant.jpg[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[A[?12l[?25h[?25l[8;53H[?12l[?25h[?25l [?12l[?25h[?25l[47GFals[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l(B[0;1m[36min[39m(B[m[K[?12l[?25h[?25li[K[?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[8;23H'imagenet[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[A[?12l[?25h[?25l[6;19H[?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25la[K[?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25limpor[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[5;54H[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[31Gimpor[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25lfro[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[4;38H[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[26Gimpor[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25lfro[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[3;43H[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[31Gimpor[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25lfro[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l   (B[0;1m[31m # show the output image[4;5H[39m(B[mcv2.imshow((B[0;1m[32m"Image"[39m(B[m, image)[5;5H(B[0;1m[36mif[39m(B[m cv2.waitKey(1) & 0xFF == ord((B[0;1m[32m'q'[39m(B[m):[6;9Hexit(0)[9d(B[0;1m[36mif[39m(B[m __name__ == (B[0;1m[32m'__main__'[39m(B[m:[10;5Hcv2.namedWindow((B[0;1m[32m'Image'[39m(B[m, cv2.WINDOW_AUTOSIZE)[11;5Hrospy.init_node((B[0;1m[32m'mike_inference'[39m(B[m, anonymous=(B[0;1m[35mTrue[39m(B[m)[12;5Hrospy.Subscriber((B[0;1m[32m'mike_camera/raw'[39m(B[m, Image, predict)[13;5Hrospy.spin()[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[6;16H[?12l[?25h[?25l[AK[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[2;21r[2;1H[10T[1;24r[3;5Hrospy.loginfo((B[0;1m[32m"get image"[39m(B[m)[4;5Himage = CvBridge().imgmsg_to_cv2(msg)[6;5Hrospy.loginfo((B[0;1m[32m"predicting..."[39m(B[m)[7;4H(B[0;1m[31m # loop over the bounding box predictions[8;5H[39m(B[mboxes, scores, labels = model.predict(image)[9;5H(B[0;1m[36mfor[39m(B[m box, score, label_id (B[0;1m[36min[39m(B[m zip(boxes, scores, labels):[10;9Hlabel = get_class_name(label_id, config.CLASSES)[11;9Hdraw_bbox(image, box, score, label)[12d[?12l[?25h[?25l[11;17H[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[4;17H[?12l[?25h[?25l[A[?12l[?25h[?25l[2;22r[2;1H[10T[1;24r[3;1H(B[0;1m[36mfrom[39m(B[m predict.tf_model (B[0;1m[36mimport[39m(B[m TFModel[4d(B[0;1m[36mfrom[39m(B[m predict.ui (B[0;1m[36mimport[39m(B[m draw_bbox[5d(B[0;1m[31m# std lib[6d[36mimport[39m(B[m cv2[8dmodel = TFModel(config.FROZEN_GRAPH_PATH)[9dproc = MaxSizePreprocessor(1000)[12d(B[0;1m[36mdef[34m predict[39m(B[m(msg):[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[9;17H[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[6;11H[?12l[?25h[?25l[A[?12l[?25h[?25l[4;17H[?12l[?25h[?25l[A[?12l[?25h[?25l[2;21r[2;1H[10T[1;24r[3;1H(B[0;1m[31m#!/usr/bin/env python3[5d[36mimport[39m(B[m rospy[6d(B[0;1m[31m# cv send image shit[7d[36mfrom[39m(B[m sensor_msgs.msg (B[0;1m[36mimport[39m(B[m Image[8d(B[0;1m[36mfrom[39m(B[m cv_bridge (B[0;1m[36mimport[39m(B[m CvBridge[9d(B[0;1m[31m# inference[10d[36mfrom[39m(B[m config (B[0;1m[36mimport[39m(B[m config[11d(B[0;1m[36mfrom[39m(B[m preprocess.maxsizeproc (B[0;1m[36mimport[39m(B[m MaxSizePreprocessor[12d(B[0;1m[36mfrom[39m(B[m predict.classes (B[0;1m[36mimport[39m(B[m get_class_name[12;17H[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[9;12H[?12l[?25h[?25l[8;17H[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[3;17H[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[4d[?12l[?25h[?25l[5;13H[?12l[?25h[?25l[6;17H[?12l[?25h[?25l[7d[?12l[?25h[?25l[8d[?12l[?25h[?25l[9;12H[?12l[?25h[?25l[10;17H[?12l[?25h[?25l[11d[?12l[?25h[?25l[12d[?12l[?25h[?25l[13d[?12l[?25h[?25l[14d[?12l[?25h[?25l[15;10H[?12l[?25h[?25l[16d2[?12l[?25h[?25l[17d[?12l[?25h[?25l[18;17H[?12l[?25h[?25l[19d[?12l[?25h[?25l[20d[?12l[?25h[?25l[21d[?12l[?25h[?25l7[3;22r8[22d[10S[1;24r[12;1H(B[0;1m[36mdef[34m predict[39m(B[m(msg):[13;5Hrospy.loginfo((B[0;1m[32m"get image"[39m(B[m)[14;5Himage = CvBridge().imgmsg_to_cv2(msg)[16;5Hrospy.loginfo((B[0;1m[32m"predicting..."[39m(B[m)[17;4H(B[0;1m[31m # loop over the bounding box predictions[18;5H[39m(B[mboxes, scores, labels = model.predict(image)[19;5H(B[0;1m[36mfor[39m(B[m box, score, label_id (B[0;1m[36min[39m(B[m zip(boxes, scores, labels):[20;9Hlabel = get_class_name(label_id, config.CLASSES)[21;9Hdraw_bbox(image, box, score, label)[12;17H[?12l[?25h[?25l[13d[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l7[10;21r8M[1;24r[11;1H[?12l[?25h[?25lmodel = VGG16(weights=(B[0;1m[32m'imagenet'[39m(B[m, include_top=(B[0;1m[35mFalse[39m(B[m)[13dimg_path = (B[0;1m[32m'elephant.jpg'[14d[39m(B[mimg = image.load_img(img_path, target_size=(224, 224))[15dx =[10G.img_to_array(img)[K[16dx = np.expand_dims(x, axis=0)[17dx = preprocess_input(x)[K[18d[K[19dfeatures = model.predict(x)[K[20d[K[21d(B[0;1m[36mdef[34m predict[39m(B[m(msg):[K[19;28H[?12l[?25h[?25l[A[?12l[?25h[?25l[17;24H[?12l[?25h[?25l[Axis=[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[11;28H[?12l[?25h[?25l[A[?12l[?25h[?25l[11d[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25lp[?12l[?25h[?25lr[?12l[?25h[?25lo[?12l[?25h[?25lc[?12l[?25h[?25l [?12l[?25h[?25l=[?12l[?25h[?25l [?12l[?25h[?25lM[?12l[?25h[?25la[?12l[?25h[?25lx[?12l[?25h[?25lS[?12l[?25h[?25li[?12l[?25h[?25lz[?12l[?25h[?25le[?12l[?25h[?25lP[?12l[?25h[?25lr[?12l[?25h[?25le[?12l[?25h[?25lp[?12l[?25h[?25lr[?12l[?25h[?25lo[?12l[?25h[?25lc[?12l[?25h[?25le[?12l[?25h[?25ls[?12l[?25h[?25ls[?12l[?25h[?25lo[?12l[?25h[?25lr[?12l[?25h[?25l([?12l[?25h[?25l1[?12l[?25h[?25l0[?12l[?25h[?25l0[?12l[?25h[?25l0[?12l[?25h[?25l)[?12l[?25h[?25l=[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[9;22r[22;1H
[1;24r[21;5Hrospy.loginfo((B[0;1m[32m"get image"[39m(B[m)[8;42H[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[7;22r[22;1H
[1;24r[21;5Himage = CvBridge().imgmsg_to_cv2(msg)[7d[?12l[?25h[?25l[7;22r[22;1H
[1;24r[6;11H[?12l[?25h[?25l[A[?12l[?25h[?25l[6d2[?12l[?25h[?25l[7d[?12l[?25h[?25l[8;11H[?12l[?25h[?25l[9d[?12l[?25h[?25l[10;11H[?12l[?25h[?25l [?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[10;12H'elephant.jpg[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[9;22r[22;1H
[1;24r[21;5Hrospy.loginfo((B[0;1m[32m"predicting..."[39m(B[m)[9d[?12l[?25h[?25l7[9;21r8M[1;24r[10;1H[?12l[?25h[?25l[A[?12l[?25h[?25lp[?12l[?25h[?25lr[?12l[?25h[?25lo[?12l[?25h[?25lc[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l =[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l M[?12l[?25h[?25la[?12l[?25h[?25lx[?12l[?25h[?25lS[?12l[?25h[?25li[?12l[?25h[?25lz[?12l[?25h[?25le[?12l[?25h[?25lP[?12l[?25h[?25lr[?12l[?25h[?25lo[?12l[?25h[?25lc[?12l[?25h[?25le[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25lproc = MaxSizePreprocessor(1000)[?12l[?25h[?25l[?12l[?25h[?25l)[K[?12l[?25h[?25l)[K[?12l[?25h[?25l)[K[?12l[?25h[?25l)[K[?12l[?25h[?25l2)[?12l[?25h[?25l22)[?12l[?25h[?25l4)[?12l[?25h[?25l[10d[?12l[?25h[?25l[11;31H[?12l[?25h[?25l[12;28H[?12l[?25h[?25l[13d0)[?12l[?25h[?25l[14;24H[?12l[?25h[?25l[15d[?12l[?25h[?25l[16;28H[?12l[?25h[?25l[17d[?12l[?25h[?25l[18;18H[?12l[?25h[?25l[19;31H[?12l[?25h[?25l[20d[?12l[?25h[?25l[21d[?12l[?25h[?25l7[3;22r8[22d[10S[1;24r[12;5Hrospy.loginfo((B[0;1m[32m"predicting..."[39m(B[m)[13;4H(B[0;1m[31m # loop over the bounding box predictions[14;5H[39m(B[mboxes, scores, labels = model.predict(image)[15;5H(B[0;1m[36mfor[39m(B[m box, score, label_id (B[0;1m[36min[39m(B[m zip(boxes, scores, labels):[16;9Hlabel = get_class_name(label_id, config.CLASSES)[17;9Hdraw_bbox(image, box, score, label)[19;4H(B[0;1m[31m # show the output image[20;5H[39m(B[mcv2.imshow((B[0;1m[32m"Image"[39m(B[m, image)[21;5H(B[0;1m[36mif[39m(B[m cv2.waitKey(1) & 0xFF == ord((B[0;1m[32m'q'[39m(B[m):[12;31H[?12l[?25h[?25l[13d[?12l[?25h[?25l[14d[?12l[?25h[?25l[15d[?12l[?25h[?25l[16d[?12l[?25h[?25l[A[?12l[?25h[?25l[16d[?12l[?25h[?25l[17d[?12l[?25h[?25l[18d[?12l[?25h[?25l[19;28H[?12l[?25h[?25l[20;31H[?12l[?25h[?25l[21d[?12l[?25h[?25l[A[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[16G"Image[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m    [49m(B[m[K[?12l[?25h[?25l    i[?12l[?25h[?25lm[?12l[?25h[?25la[?12l[?25h[?25lg[?12l[?25h[?25le[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l =[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l p[?12l[?25h[?25lr[?12l[?25h[?25lo[?12l[?25h[?25lc[?12l[?25h[?25l.[?12l[?25h[?25lp[?12l[?25h[?25lr[?12l[?25h[?25lo[?12l[?25h[?25lc[?12l[?25h[?25le[?12l[?25h[?25ls[?12l[?25h[?25ls[?12l[?25h[?25l([?12l[?25h[?25lu[?12l[?25h[?25l [?12l[?25h[?25lm[?12l[?25h[?25l [?12l[?25h[?25li[?12l[?25h[?25lm[?12l[?25h[?25la[?12l[?25h[?25lg[?12l[?25h[?25le[?12l[?25h[?25l)[?12l[?25h[?25l;[?12l[?25h[?25l [?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[17;32H[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[10;32H[?12l[?25h[?25l[A[?12l[?25h[?25l[8;18H[?12l[?25h[?25l[A[?12l[?25h[?25l[6;28H[?12l[?25h[?25l[A[?12l[?25h[?25l[4;24H[?12l[?25h[?25l[3;30H[?12l[?25h[?25l[2;21r[2;1H[10T[1;24r[3;1H(B[0;1m[36mfrom[39m(B[m predict.tf_model (B[0;1m[36mimport[39m(B[m TFModel[4d(B[0;1m[36mfrom[39m(B[m predict.ui (B[0;1m[36mimport[39m(B[m draw_bbox[5d(B[0;1m[31m# std lib[6d[36mimport[39m(B[m cv2[8dmodel = VGG16(weights=(B[0;1m[32m'imagenet'[39m(B[m, include_top=(B[0;1m[35mFalse[39m(B[m)[9dproc = MaxSizePreprocessor(224)[11dimg = image.load_img(img_path, target_size=(224, 224))[12dx = image.img_to_array(img)[?12l[?25h[?25l[Ath, [?12l[?25h[?25l[A[?12l[?25h[?25l[9;32H[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[8;32H[?12l[?25h[?25l[9d[?12l[?25h[?25l[10d[?12l[?25h[?25l[11;32H[?12l[?25h[?25l[12;28H[?12l[?25h[?25l[13d0)[?12l[?25h[?25l[14;24H[?12l[?25h[?25l[15d[?12l[?25h[?25l[16;28H[?12l[?25h[?25l[17d[?12l[?25h[?25l[16;28H[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[15;22r[22;1H
[1;24r[21;5Hrospy.loginfo((B[0;1m[32m"predicting..."[39m(B[m)[15d[?12l[?25h[?25l[15;22r[22;1H
[1;24r[21;4H(B[0;1m[31m # loop over the bounding box predictions[14;24H[39m(B[m[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[14;22r[22;1H
[1;24r[21;5Hboxes, scores, labels = model.predict(image)[13;30H[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[13;22r[22;1H
[1;24r[21;5H(B[0;1m[36mfor[39m(B[m box, score, label_id (B[0;1m[36min[39m(B[m zip(boxes, scores, labels):[12;28H[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[12;22r[22;1H
[1;24r[21;9Hlabel = get_class_name(label_id, config.CLASSES)[11;55H[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[10;22r[22;1H
[1;24r[21;9Hdraw_bbox(image, box, score, label)[10d[?12l[?25h[?25l[10;22r[22;1H
[1;24r[9;32H[?12l[?25h[?25l[10d[?12l[?25h[?25l[11;18H[?12l[?25h[?25l[12;31H[?12l[?25h[?25l[13dt[?12l[?25h[?25l[14d[?12l[?25h[?25l[15;32H[?12l[?25h[?25l[16d[?12l[?25h[?25l[17d[?12l[?25h[?25l[18d[?12l[?25h[?25l[19d[?12l[?25h[?25l[20d[?12l[?25h[?25l[21d[?12l[?25h[?25l7[3;22r8[22d[10S[1;24r[12;4H(B[0;1m[31m # show the output image[13;5H[39m(B[mimage = proc.process(image)[14;5H(B[0;1m[36mif[39m(B[m cv2.waitKey(1) & 0xFF == ord((B[0;1m[32m'q'[39m(B[m):[15;9Hexit(0)[18d(B[0;1m[36mif[39m(B[m __name__ == (B[0;1m[32m'__main__'[39m(B[m:[19;5Hcv2.namedWindow((B[0;1m[32m'Image'[39m(B[m, cv2.WINDOW_AUTOSIZE)[20;5Hrospy.init_node((B[0;1m[32m'mike_inference'[39m(B[m, anonymous=(B[0;1m[35mTrue[39m(B[m)[21;5Hrospy.Subscriber((B[0;1m[32m'mike_camera/raw'[39m(B[m, Image, predict)[12;28H[?12l[?25h[?25l[13;32H[?12l[?25h[?25l[14d[?12l[?25h[?25l[15;16H[?12l[?25h[?25l[16d[?12l[?25h[?25l[17d[?12l[?25h[?25l[18;27H[?12l[?25h[?25l[19;32H[?12l[?25h[?25l[20d[?12l[?25h[?25l[21d[?12l[?25h[?25l7[3;22r8[22d[10S[1;24r[12;5Hrospy.spin()[?12l[?25h[?25l[13d[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[12;17H[?12l[?25h[?25l[11;32H[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[8;27H[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[5;16H[?12l[?25h[?25l[4;32H[?12l[?25h[?25l[A[?12l[?25h[?25l[2;21r[2;1H[10T[1;24r[3;5Himage = CvBridge().imgmsg_to_cv2(msg)[5;5Hrospy.loginfo((B[0;1m[32m"predicting..."[39m(B[m)[6;4H(B[0;1m[31m # loop over the bounding box predictions[7;5H[39m(B[mboxes, scores, labels = model.predict(image)[8;5H(B[0;1m[36mfor[39m(B[m box, score, label_id (B[0;1m[36min[39m(B[m zip(boxes, scores, labels):[9;9Hlabel = get_class_name(label_id, config.CLASSES)[10;9Hdraw_bbox(image, box, score, label)[12;4H(B[0;1m[31m # show the output image[39m(B[m[?12l[?25h[?25l[A[?12l[?25h[?25l[10;32H[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[9d[?12l[?25h[?25l[10d[?12l[?25h[?25l[11d[?12l[?25h[?25l[12;28H[?12l[?25h[?25l[13;32H[?12l[?25h[?25l7[14;21r8[14dM[1;24r[14;1H[?12l[?25h[?25lx = image.img_to_array(img)[15dx = np.expand_dims(x, axis=0)[K[16dx = preprocess_input(x)[18dfeatures = model.predict(x)[19d[K[20;5H(B[0;1m[36mif[39m(B[m cv2.waitKey(1) & 0xFF == ord((B[0;1m[32m'q'[39m(B[m):[K[21;5H    exit(0)[K[19d[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l x = image.img_to_array(img) [?12l[?25h[?25l  x = image.img_to_array(img)  [?12l[?25h[?25l   x = image.img_to_array(img)   [?12l[?25h[?25l    x = image.img_to_array(img)[5G[?12l[?25h[?25l[15d[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l x = np.expand_dims(x, axis=0) [?12l[?25h[?25l  x = np.expand_dims(x, axis=0)  [?12l[?25h[?25l   x = np.expand_dims(x, axis=0)   [?12l[?25h[?25l    x = np.expand_dims(x, axis=0)[5G[?12l[?25h[?25l[16d[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[15;34H[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l [?12l[?25h[?25l[16;24H[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l x = preprocess_input(x) [?12l[?25h[?25l  x = preprocess_input(x)  [?12l[?25h[?25l   x = preprocess_input(x)   [?12l[?25h[?25l    x = preprocess_input(x)[5G[?12l[?25h[?25l[17d[?12l[?25h[?25l[18;5H[?12l[?25h[?25l[19d[?12l[?25h[?25l[Afeat[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l features = model.predict(x) [?12l[?25h[?25l  features = model.predict(x)  [?12l[?25h[?25l   features = model.predict(x)   [?12l[?25h[?25l    features = model.predict(x)[5G[?12l[?25h[?25l[19d[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l    R[?12l[?25h[?25lO[?12l[?25h[?25lS[?12l[?25h[?25l_[?12l[?25h[?25lI[?12l[?25h[?25lN[?12l[?25h[?25lF[?12l[?25h[?25lO[?12l[?25h[?25l([?12l[?25h[?25l"[?12l[?25h[?25l"[?12l[?25h[?25l)[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l(B[0;1m[32m"["[39m(B[m)[?12l[?25h[?25l(B[0;1m[32mI"[39m(B[m)[?12l[?25h[?25l(B[0;1m[32m"[39m(B[m)[K[?12l[?25h[?25l"")[K[?12l[?25h[?25l)[K[?12l[?25h[?25l"[?12l[?25h[?25l)[K[?12l[?25h[?25l)[K[?12l[?25h[?25l)[K[?12l[?25h[?25l)[K[?12l[?25h[?25l)[K[?12l[?25h[?25l)[K[?12l[?25h[?25l)[K[?12l[?25h[?25l)[K[?12l[?25h[?25l)[K[?12l[?25h[?25l)[?12l[?25h[?25l [?12l[?25h[?25l[42m    [49m(B[m[K[?12l[?25h[?25l    p[?12l[?25h[?25lr[?12l[?25h[?25li[?12l[?25h[?25ln[?12l[?25h[?25l(B[0;1m[36mprint[39m(B[m[?12l[?25h[?25l([?12l[?25h[?25lf[?12l[?25h[?25le[?12l[?25h[?25la[?12l[?25h[?25lt[?12l[?25h[?25lu[?12l[?25h[?25lr[?12l[?25h[?25le[?12l[?25h[?25ls[?12l[?25h[?25l)[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[16;20H[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[10;20H[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[3;20H[?12l[?25h[?25l[2;21r[2;1H[10T[1;24r[3;1H(B[0;1m[36mfrom[39m(B[m predict.tf_model (B[0;1m[36mimport[39m(B[m TFModel[4d(B[0;1m[36mfrom[39m(B[m predict.ui (B[0;1m[36mimport[39m(B[m draw_bbox[5d(B[0;1m[31m# std lib[6d[36mimport[39m(B[m cv2[8dmodel = VGG16(weights=(B[0;1m[32m'imagenet'[39m(B[m, include_top=(B[0;1m[35mFalse[39m(B[m)[9dproc = MaxSizePreprocessor(224)[11d(B[0;1m[36mdef[34m predict[39m(B[m(msg):[12;5Hrospy.loginfo((B[0;1m[32m"get image"[39m(B[m)[12;20H[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[9;20H[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[6;11H[?12l[?25h[?25l[A[?12l[?25h[?25l[4;20H[?12l[?25h[?25l[A[?12l[?25h[?25l[4d[?12l[?25h[?25l[5;10H[?12l[?25h[?25l[6d2[?12l[?25h[?25l[7d[?12l[?25h[?25l[8;20H[?12l[?25h[?25l[9d[?12l[?25h[?25l[10d[?12l[?25h[?25l[11;18H[?12l[?25h[?25l[12;20H[?12l[?25h[?25l[13d[?12l[?25h[?25l[14d[?12l[?25h[?25l[15;20H[?12l[?25h[?25l[16d[?12l[?25h[?25l[17d[?12l[?25h[?25l[18d[?12l[?25h[?25l[19d[?12l[?25h[?25l[20d[?12l[?25h[?25l[21d[?12l[?25h[?25l7[3;22r8[22d[10S[1;24r[12;4H(B[0;1m[31m # show the output image[13;5H[39m(B[mimage = proc.process(image)[14;5Hx = image.img_to_array(img)[15;5Hx = np.expand_dims(x, axis=0)[16;5Hx = preprocess_input(x)[18;5Hfeatures = model.predict(x)[19;5H(B[0;1m[36mprint[39m(B[m(features)[20;5H(B[0;1m[36mif[39m(B[m cv2.waitKey(1) & 0xFF == ord((B[0;1m[32m'q'[39m(B[m):[21;9Hexit(0)[12;20H[?12l[?25h[?25l[13d[?12l[?25h[?25l[14d[?12l[?25h[?25l[15d[?12l[?25h[?25l[16d[?12l[?25h[?25l[17d[?12l[?25h[?25l[18;20H[?12l[?25h[?25l[19d[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[22d(B[0;7m–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π –±—É—Ñ–µ—Ä?  (–ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ "–ù–µ—Ç" –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ü–û–¢–ï–†–Ø–ù–´.)   [23;1H Y(B[m –î–∞[K[24d(B[0;7m N(B[m –ù–µ—Ç          (B[0;7m^C(B[m –û—Ç–º–µ–Ω–∞[K[22;79H[?12l[?25h[?25l[?12l[?25h[?25l[23d(B[0;7m^G(B[m –ü–æ–º–æ—â—å[23;21H(B[0;7mM-D(B[m –§–æ—Ä–º–∞—Ç DOS[41G(B[0;7mM-A(B[m –î–æ–ø. –≤ –Ω–∞—á–∞–ª–æ   (B[0;7mM-B(B[m –†–µ–∑–µ—Ä–≤. –∫–æ–ø–∏—è[24d(B[0;7m^C(B[m –û—Ç–º–µ–Ω–∞[17G    (B[0;7mM-M(B[m –§–æ—Ä–º–∞—Ç Mac[41G(B[0;7mM-P(B[m –î–æ–ø. –≤ –∫–æ–Ω–µ—Ü    (B[0;7m^T(B[m –ö —Ñ–∞–π–ª–∞–º[22d(B[0;7m–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏: pretrained.py                                          (B[m[22;36H[?12l[?25h[?25l[K[1;79H[72G(B[0;7m       (B[m[22;32H(B[0;7m[ Wrote 46 lines ](B[m[J[24;80H[?12l[?25h[24;1H[?1049l[23;0;0t[?1l>]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inference/scriptjetson@jetson:~/vanilla.robotix.MikeCore/src/inference/script$ cd ;.[K[K..
]0;jetson@jetson: ~/vanilla.robotix.MikeCore/src/inferencejetson@jetson:~/vanilla.robotix.MikeCore/src/inference$ cd ..
]0;jetson@jetson: ~/vanilla.robotix.MikeCore/srcjetson@jetson:~/vanilla.robotix.MikeCore/src$ cd ..
]0;jetson@jetson: ~/vanilla.robotix.MikeCorejetson@jetson:~/vanilla.robotix.MikeCore$ rosrun inference s[Kma
main.py         maxsizeproc.py  
]0;jetson@jetson: ~/vanilla.robotix.MikeCorejetson@jetson:~/vanilla.robotix.MikeCore$ rosrun inference main.py
Using TensorFlow backend.
2020-03-26 20:04:47.755071: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.0
WARNING:tensorflow:From /home/jetson/vanilla.robotix.MikeCore/src/inference/script/predict/tf_model.py:74: The name tf.ConfigProto is deprecated. Please use tf.compat.v1.ConfigProto instead.

WARNING:tensorflow:From /home/jetson/vanilla.robotix.MikeCore/src/inference/script/predict/tf_model.py:77: The name tf.Session is deprecated. Please use tf.compat.v1.Session instead.

2020-03-26 20:05:06.209504: W tensorflow/core/platform/profile_utils/cpu_utils.cc:98] Failed to find bogomips in /proc/cpuinfo; cannot determine CPU frequency
2020-03-26 20:05:06.210560: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x25cc4640 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2020-03-26 20:05:06.210621: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
2020-03-26 20:05:06.218638: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcuda.so.1
2020-03-26 20:05:06.532711: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:950] ARM64 does not support NUMA - returning NUMA node zero
2020-03-26 20:05:06.533010: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x25b01700 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:
2020-03-26 20:05:06.533062: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): NVIDIA Tegra X1, Compute Capability 5.3
2020-03-26 20:05:06.533750: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:950] ARM64 does not support NUMA - returning NUMA node zero
2020-03-26 20:05:06.533877: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: 
name: NVIDIA Tegra X1 major: 5 minor: 3 memoryClockRate(GHz): 0.9216
pciBusID: 0000:00:00.0
2020-03-26 20:05:06.533985: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.0
2020-03-26 20:05:06.876343: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10.0
2020-03-26 20:05:07.176446: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcufft.so.10.0
2020-03-26 20:05:07.593861: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcurand.so.10.0
2020-03-26 20:05:08.015595: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusolver.so.10.0
2020-03-26 20:05:08.251368: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusparse.so.10.0
2020-03-26 20:05:09.089094: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7
2020-03-26 20:05:09.090137: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:950] ARM64 does not support NUMA - returning NUMA node zero
2020-03-26 20:05:09.090882: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:950] ARM64 does not support NUMA - returning NUMA node zero
2020-03-26 20:05:09.091099: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2020-03-26 20:05:09.091395: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.0
2020-03-26 20:05:27.080326: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1159] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-03-26 20:05:27.080485: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1165]      0 
2020-03-26 20:05:27.080515: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1178] 0:   N 
2020-03-26 20:05:27.081229: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:950] ARM64 does not support NUMA - returning NUMA node zero
2020-03-26 20:05:27.081746: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:950] ARM64 does not support NUMA - returning NUMA node zero
2020-03-26 20:05:27.081888: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1304] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 1582 MB memory) -> physical GPU (device: 0, name: NVIDIA Tegra X1, pci bus id: 0000:00:00.0, compute capability: 5.3)
WARNING:tensorflow:From /home/jetson/vanilla.robotix.MikeCore/src/inference/script/predict/tf_model.py:86: The name tf.logging.set_verbosity is deprecated. Please use tf.compat.v1.logging.set_verbosity instead.

WARNING:tensorflow:From /home/jetson/vanilla.robotix.MikeCore/src/inference/script/predict/tf_model.py:86: The name tf.logging.ERROR is deprecated. Please use tf.compat.v1.logging.ERROR instead.

2020-03-26 20:05:49.495916: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:950] ARM64 does not support NUMA - returning NUMA node zero
2020-03-26 20:05:49.515514: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: 
name: NVIDIA Tegra X1 major: 5 minor: 3 memoryClockRate(GHz): 0.9216
pciBusID: 0000:00:00.0
2020-03-26 20:05:49.964491: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.0
2020-03-26 20:05:52.396621: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10.0
2020-03-26 20:05:52.446760: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcufft.so.10.0
2020-03-26 20:05:52.539673: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcurand.so.10.0
2020-03-26 20:05:52.631167: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusolver.so.10.0
2020-03-26 20:05:52.726561: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusparse.so.10.0
2020-03-26 20:05:52.887887: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7
2020-03-26 20:05:52.888485: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:950] ARM64 does not support NUMA - returning NUMA node zero
2020-03-26 20:05:52.888892: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:950] ARM64 does not support NUMA - returning NUMA node zero
2020-03-26 20:05:52.889021: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2020-03-26 20:05:53.125623: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:950] ARM64 does not support NUMA - returning NUMA node zero
2020-03-26 20:05:53.125788: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1618] Found device 0 with properties: 
name: NVIDIA Tegra X1 major: 5 minor: 3 memoryClockRate(GHz): 0.9216
pciBusID: 0000:00:00.0
2020-03-26 20:05:53.125902: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudart.so.10.0
2020-03-26 20:05:53.126158: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcublas.so.10.0
2020-03-26 20:05:53.126307: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcufft.so.10.0
2020-03-26 20:05:53.126423: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcurand.so.10.0
2020-03-26 20:05:53.126529: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusolver.so.10.0
2020-03-26 20:05:53.126625: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcusparse.so.10.0
2020-03-26 20:05:53.126733: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcudnn.so.7
2020-03-26 20:05:53.127075: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:950] ARM64 does not support NUMA - returning NUMA node zero
2020-03-26 20:05:53.127422: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:950] ARM64 does not support NUMA - returning NUMA node zero
2020-03-26 20:05:53.127505: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1746] Adding visible gpu devices: 0
2020-03-26 20:05:53.127790: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1159] Device interconnect StreamExecutor with strength 1 edge matrix:
2020-03-26 20:05:53.127827: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1165]      0 
2020-03-26 20:05:53.127851: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1178] 0:   N 
2020-03-26 20:05:53.128424: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:950] ARM64 does not support NUMA - returning NUMA node zero
2020-03-26 20:05:53.128806: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:950] ARM64 does not support NUMA - returning NUMA node zero
2020-03-26 20:05:53.128964: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1304] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 1582 MB memory) -> physical GPU (device: 0, name: NVIDIA Tegra X1, pci bus id: 0000:00:00.0, compute capability: 5.3)
Unable to init server: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫: –í —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –æ—Ç–∫–∞–∑–∞–Ω–æ

(Image:8936): Gtk-[1;33mWARNING[0m **: [34m20:05:53.344[0m: cannot open display: 
]0;jetson@jetson: ~/vanilla.robotix.MikeCorejetson@jetson:~/vanilla.robotix.MikeCore$ rosrun inference main.pycd ..[Knano pretrained.py[4Pls preprocess/nano pretrained.py
[?1049h[22;0;0t[1;24r(B[m[4l[?7h[39;49m[?1h=[?1h=[?1h=[?25l[39;49m(B[m[H[2J[22;34H(B[0;7m[ –ù–æ–≤—ã–π —Ñ–∞–π–ª ](B[m[H(B[0;7m  GNU nano 2.9.3                     pretrained.py                              [1;79H(B[m[23d(B[0;7m^G(B[m –ü–æ–º–æ—â—å    (B[0;7m^O(B[m –ó–∞–ø–∏—Å–∞—Ç—å  (B[0;7m^W(B[m –ü–æ–∏—Å–∫     (B[0;7m^K(B[m –í—ã—Ä–µ–∑–∞—Ç—å  (B[0;7m^J(B[m –í—ã—Ä–æ–≤–Ω—è—Ç—å (B[0;7m^C(B[m –¢–µ–∫–ü–æ–∑–∏—Ü[24d(B[0;7m^X(B[m –í—ã—Ö–æ–¥     (B[0;7m^R(B[m –ß–∏—Ç–§–∞–π–ª   (B[0;7m^\(B[m –ó–∞–º–µ–Ω–∞    (B[0;7m^U(B[m –û—Ç–º–µ–Ω. –≤—ã—Ä(B[0;7m^T(B[m –ü—Ä–æ–≤. —Å–∏–Ω—Ç(B[0;7m^_(B[m –ö —Å—Ç—Ä–æ–∫–µ[22d[3d[39;49m(B[m[?12l[?25h[?25l[22d[J[24;80H[?12l[?25h[24;1H[?1049l[23;0;0t[?1l>]0;jetson@jetson: ~/vanilla.robotix.MikeCorejetson@jetson:~/vanilla.robotix.MikeCore$ nano src/
camera/               .gitignore            inference/
camera_csi/           gpio_jetson/          movement/
cartographer_ydlidar/ gpio_jetson_service/  network/
CMakeLists.txt        hard_drive/           ydlidar_ros/
]0;jetson@jetson: ~/vanilla.robotix.MikeCorejetson@jetson:~/vanilla.robotix.MikeCore$ nano src/infw[Kerence/sr[K[K
CMakeLists.txt  package.xml     script/         typescript
]0;jetson@jetson: ~/vanilla.robotix.MikeCorejetson@jetson:~/vanilla.robotix.MikeCore$ nano src/inference/
CMakeLists.txt  package.xml     script/         typescript
]0;jetson@jetson: ~/vanilla.robotix.MikeCorejetson@jetson:~/vanilla.robotix.MikeCore$ nano src/inference/script/
config/        predict/       pretrained.py  
main.py        preprocess/    res/           
]0;jetson@jetson: ~/vanilla.robotix.MikeCorejetson@jetson:~/vanilla.robotix.MikeCore$ nano src/inference/script/
config/        predict/       pretrained.py  
main.py        preprocess/    res/           
]0;jetson@jetson: ~/vanilla.robotix.MikeCorejetson@jetson:~/vanilla.robotix.MikeCore$ nano src/inference/script/
config/        predict/       pretrained.py  
main.py        preprocess/    res/           
]0;jetson@jetson: ~/vanilla.robotix.MikeCorejetson@jetson:~/vanilla.robotix.MikeCore$ nano src/inference/script/main.py 
[?1049h[22;0;0t[1;24r(B[m[4l[?7h[39;49m[?1h=[?1h=[?1h=[?25l[39;49m(B[m[H[2J[22;33H(B[0;7m[ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ ](B[m[22;32H(B[0;7m[ Read 41 lines ](B[m[H(B[0;7m  GNU nano 2.9.3             src/inference/script/main.py                       [1;79H(B[m[23d(B[0;7m^G(B[m –ü–æ–º–æ—â—å    (B[0;7m^O(B[m –ó–∞–ø–∏—Å–∞—Ç—å  (B[0;7m^W(B[m –ü–æ–∏—Å–∫     (B[0;7m^K(B[m –í—ã—Ä–µ–∑–∞—Ç—å  (B[0;7m^J(B[m –í—ã—Ä–æ–≤–Ω—è—Ç—å (B[0;7m^C(B[m –¢–µ–∫–ü–æ–∑–∏—Ü[24d(B[0;7m^X(B[m –í—ã—Ö–æ–¥     (B[0;7m^R(B[m –ß–∏—Ç–§–∞–π–ª   (B[0;7m^\(B[m –ó–∞–º–µ–Ω–∞    (B[0;7m^U(B[m –û—Ç–º–µ–Ω. –≤—ã—Ä(B[0;7m^T(B[m –ü—Ä–æ–≤. —Å–∏–Ω—Ç(B[0;7m^_(B[m –ö —Å—Ç—Ä–æ–∫–µ[22d[3d(B[0;1m[31m#!/usr/bin/env python3[5d[36mimport[39m(B[m rospy[6d(B[0;1m[31m# cv send image shit[7d[36mfrom[39m(B[m sensor_msgs.msg (B[0;1m[36mimport[39m(B[m Image[8d(B[0;1m[36mfrom[39m(B[m cv_bridge (B[0;1m[36mimport[39m(B[m CvBridge[9d(B[0;1m[31m# inference[10d[36mfrom[39m(B[m config (B[0;1m[36mimport[39m(B[m config[11d(B[0;1m[36mfrom[39m(B[m preprocess.maxsizeproc (B[0;1m[36mimport[39m(B[m MaxSizePreprocessor[12d(B[0;1m[36mfrom[39m(B[m predict.classes (B[0;1m[36mimport[39m(B[m get_class_name[13d(B[0;1m[36mfrom[39m(B[m predict.tf_model (B[0;1m[36mimport[39m(B[m TFModel[14d(B[0;1m[36mfrom[39m(B[m predict.ui (B[0;1m[36mimport[39m(B[m draw_bbox[15d(B[0;1m[31m# std lib[16d[36mimport[39m(B[m cv2[18dmodel = TFModel(config.FROZEN_GRAPH_PATH)[19dproc = MaxSizePreprocessor(1000)[3d[?12l[?25h[?25l[4d[?12l[?25h[?25l[5d[?12l[?25h[?25l[6d[?12l[?25h[?25l[7d[?12l[?25h[?25l[8d[?12l[?25h[?25l[9d[?12l[?25h[?25l[10d[?12l[?25h[?25l[11d[?12l[?25h[?25l[12d[?12l[?25h[?25l[13d[?12l[?25h[?25l[14d[?12l[?25h[?25l[15d[?12l[?25h[?25l[16d[?12l[?25h[?25l[17d[?12l[?25h[?25l[18d[?12l[?25h[?25l[19d[?12l[?25h[?25l[20d[?12l[?25h[?25l[21d[?12l[?25h[?25l7[3;21r8[10S[1;24r[12;1H(B[0;1m[36mdef[34m predict[39m(B[m(msg):[13;5Hrospy.loginfo((B[0;1m[32m"get image"[39m(B[m)[14;5Himage = CvBridge().imgmsg_to_cv2(msg)[16;5Hrospy.loginfo((B[0;1m[32m"predicting..."[39m(B[m)[17;4H(B[0;1m[31m # loop over the bounding box predictions[18;5H[39m(B[mboxes, scores, labels = model.predict(image)[19;5H(B[0;1m[36mfor[39m(B[m box, score, label_id (B[0;1m[36min[39m(B[m zip(boxes, scores, labels):[20;9Hlabel = get_class_name(label_id, config.CLASSES)[21;9Hdraw_bbox(image, box, score, label)[12d[?12l[?25h[?25l[13d[?12l[?25h[?25l[14d[?12l[?25h[?25l[15d[?12l[?25h[?25l[16d[?12l[?25h[?25l[17d[?12l[?25h[?25l[18d[?12l[?25h[?25l[22d[K[19d[?12l[?25h[?25l[A[?12l[?25h[?25l[19d[?12l[?25h[?25l[20d[?12l[?25h[?25l[21d[?12l[?25h[?25l7[2;22r8[22d[10S[1;24r[2;1H[K[13;4H(B[0;1m[31m # show the output image[14;5H[39m(B[mcv2.imshow((B[0;1m[32m"Image"[39m(B[m, image)[15;5H(B[0;1m[36mif[39m(B[m cv2.waitKey(1) & 0xFF == ord((B[0;1m[32m'q'[39m(B[m):[16;9Hexit(0)[19d(B[0;1m[36mif[39m(B[m __name__ == (B[0;1m[32m'__main__'[39m(B[m:[20;5Hcv2.namedWindow((B[0;1m[32m'Image'[39m(B[m, cv2.WINDOW_AUTOSIZE)[21;5Hrospy.init_node((B[0;1m[32m'mike_inference'[39m(B[m, anonymous=(B[0;1m[35mTrue[39m(B[m)[12d[?12l[?25h[?25l[13d[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[12d[?12l[?25h[?25l[13d[?12l[?25h[?25l[14d[?12l[?25h[?25l[15d[?12l[?25h[?25l[16d[?12l[?25h[?25l[17d[?12l[?25h[?25l[18d[?12l[?25h[?25l[19d[?12l[?25h[?25l[20d[?12l[?25h[?25l[21d[?12l[?25h[?25l7[2;22r8[22d[10S[1;24r[12;5Hrospy.Subscriber((B[0;1m[32m'mike_camera/raw'[39m(B[m, Image, predict)[13;5Hrospy.spin()[A[?12l[?25h[?25l[13d[?12l[?25h[?25l[14d[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[2;21r[2;1H[10T[1;24r[3;5Hrospy.loginfo((B[0;1m[32m"get image"[39m(B[m)[4;5Himage = CvBridge().imgmsg_to_cv2(msg)[6;5Hrospy.loginfo((B[0;1m[32m"predicting..."[39m(B[m)[7;4H(B[0;1m[31m # loop over the bounding box predictions[8;5H[39m(B[mboxes, scores, labels = model.predict(image)[9;5H(B[0;1m[36mfor[39m(B[m box, score, label_id (B[0;1m[36min[39m(B[m zip(boxes, scores, labels):[10;9Hlabel = get_class_name(label_id, config.CLASSES)[11;9Hdraw_bbox(image, box, score, label)[12d[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[2;22r[2;1H[10T[1;24r[3;1H(B[0;1m[36mfrom[39m(B[m predict.tf_model (B[0;1m[36mimport[39m(B[m TFModel[4d(B[0;1m[36mfrom[39m(B[m predict.ui (B[0;1m[36mimport[39m(B[m draw_bbox[5d(B[0;1m[31m# std lib[6d[36mimport[39m(B[m cv2[8dmodel = TFModel(config.FROZEN_GRAPH_PATH)[9dproc = MaxSizePreprocessor(1000)[12d(B[0;1m[36mdef[34m predict[39m(B[m(msg):[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[2;21r[2;1H[10T[1;24r[3;1H(B[0;1m[31m#!/usr/bin/env python3[5d[36mimport[39m(B[m rospy[6d(B[0;1m[31m# cv send image shit[7d[36mfrom[39m(B[m sensor_msgs.msg (B[0;1m[36mimport[39m(B[m Image[8d(B[0;1m[36mfrom[39m(B[m cv_bridge (B[0;1m[36mimport[39m(B[m CvBridge[9d(B[0;1m[31m# inference[10d[36mfrom[39m(B[m config (B[0;1m[36mimport[39m(B[m config[11d(B[0;1m[36mfrom[39m(B[m preprocess.maxsizeproc (B[0;1m[36mimport[39m(B[m MaxSizePreprocessor[12d(B[0;1m[36mfrom[39m(B[m predict.classes (B[0;1m[36mimport[39m(B[m get_class_name[?12l[?25h[?25l[13d[?12l[?25h[?25l[14d[?12l[?25h[?25l[15d[?12l[?25h[?25l[16d[?12l[?25h[?25l[17d[?12l[?25h[?25l[18d[?12l[?25h[?25l[19d[?12l[?25h[?25l[20d[?12l[?25h[?25l[21d[?12l[?25h[?25l7[3;22r8[22d[10S[1;24r[12;1H(B[0;1m[36mdef[34m predict[39m(B[m(msg):[13;5Hrospy.loginfo((B[0;1m[32m"get image"[39m(B[m)[14;5Himage = CvBridge().imgmsg_to_cv2(msg)[16;5Hrospy.loginfo((B[0;1m[32m"predicting..."[39m(B[m)[17;4H(B[0;1m[31m # loop over the bounding box predictions[18;5H[39m(B[mboxes, scores, labels = model.predict(image)[19;5H(B[0;1m[36mfor[39m(B[m box, score, label_id (B[0;1m[36min[39m(B[m zip(boxes, scores, labels):[20;9Hlabel = get_class_name(label_id, config.CLASSES)[21;9Hdraw_bbox(image, box, score, label)[12d[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[11d[?12l[?25h[?25l[12d[?12l[?25h[?25l[13d[?12l[?25h[?25l[14d[?12l[?25h[?25l[15d[?12l[?25h[?25l[16d[?12l[?25h[?25l[17d[?12l[?25h[?25l[18d[?12l[?25h[?25l[19d[?12l[?25h[?25l[20d[?12l[?25h[?25l[21d[?12l[?25h[?25l7[2;22r8[22d[10S[1;24r[2;1H[K[13;4H(B[0;1m[31m # show the output image[14;5H[39m(B[mcv2.imshow((B[0;1m[32m"Image"[39m(B[m, image)[15;5H(B[0;1m[36mif[39m(B[m cv2.waitKey(1) & 0xFF == ord((B[0;1m[32m'q'[39m(B[m):[16;9Hexit(0)[19d(B[0;1m[36mif[39m(B[m __name__ == (B[0;1m[32m'__main__'[39m(B[m:[20;5Hcv2.namedWindow((B[0;1m[32m'Image'[39m(B[m, cv2.WINDOW_AUTOSIZE)[21;5Hrospy.init_node((B[0;1m[32m'mike_inference'[39m(B[m, anonymous=(B[0;1m[35mTrue[39m(B[m)[12d[?12l[?25h[?25l[13d[?12l[?25h[?25l[14d[?12l[?25h[?25l[15d[?12l[?25h[?25l[16d[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[23d[J[24;80H[?12l[?25h[24;1H[?1049l[23;0;0t[?1l>]0;jetson@jetson: ~/vanilla.robotix.MikeCorejetson@jetson:~/vanilla.robotix.MikeCore$ nano src/inference/script/main.py [K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kr[Kexit
exit
–ï—Å—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è.
]0;jetson@jetson: ~/vanilla.robotix.MikeCorejetson@jetson:~/vanilla.robotix.MikeCore$ exit
exit
[?12l[?25h[24;1H[?1049l[23;0;0t[?1l>–ü–æ–ª—É—á–µ–Ω SIGHUP –∏–ª–∏ SIGTERM

Script done on 2020-03-26 20:07:25+0400
